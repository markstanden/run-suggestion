@page "/"
@using RunSuggestion.Web.Constants
@using RunSuggestion.Web.Interfaces
@inject ILogger<Home> Logger
@inject ICsvUploadApiService CsvUploadApiService

<PageTitle>@Site.HomePage.Title</PageTitle>

<h1 class="page-heading" data-testid="homepage-heading">
    @Site.HomePage.Heading
</h1>

<AuthorizeView>
    <Authorized>

        <section class="button-section"
                 data-testid="upload-section">
            <h2 class="button-section-title"
                data-testid="upload-section--title">
                Upload
            </h2>
            <InputFile data-testid="upload-section--input"
                       OnChange="PostUpload"
                       multiple/>
        </section>

        <section class="button-section"
                 data-testid="recommendation-section">
            <h2 class="button-section-title"
                data-testid="recommendation-section--title">
                Recommendation
            </h2>
            <button class="button"
                    data-testid="recommendation-section--button"
                    type="button"
                    @onclick="GetRecommendation">
                @ButtonText.GetRecommendation
            </button>
        </section>

        <section class="status-section"
                 data-testid="status-section">
            <p data-testid="status-section--output">
                @Status
            </p>
        </section>
    </Authorized>
</AuthorizeView>

@code {

    private string Status { get; set; } = string.Empty;

    private async Task PostUpload(InputFileChangeEventArgs e)
    {
        Logger.LogInformation(Logs.Upload.Start);
        Status = Constants.Status.Uploading;
        StateHasChanged();

        try
        {
            IBrowserFile csvFile = e.GetMultipleFiles(1)[0];
            using MemoryStream memoryStream = new();
            await csvFile.OpenReadStream().CopyToAsync(memoryStream);

            memoryStream.Position = 0;
            using StreamReader reader = new(memoryStream);
            string csvContent = await reader.ReadToEndAsync();

            int rowsAdded = await CsvUploadApiService.UploadAsync(csvContent);
            Status = Constants.Status.UploadCompleted(rowsAdded);
            Logger.LogInformation(Logs.Upload.Success);
        }
        catch (Exception ex)
        {
            Status = Constants.Status.UploadFailed;
            Logger.LogError(ex, Logs.Upload.Failure);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void GetRecommendation()
    {
        Logger.LogInformation(Logs.Recommendation.Start);
        Status = Constants.Status.GettingRecommendation;
    }

}
